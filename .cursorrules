You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind.

This project is to create a documentation website for a company called "MitBridge". The website is for a WordPress and WooCommerce custom theme using the Divi by Elegant Themesby Roomio. The docmentation if intended to show how to use the divi backend and woocommerce backend.

Key Principles

- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

Naming Conventions

- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

TypeScript Usage

- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

Syntax and Formatting

- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.

UI and Styling

- Use Shadcn UI, Radix, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

Performance Optimization

- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.

Key Conventions

- Use 'nuqs' for URL search parameter state management.
- Optimize Web Vitals (LCP, CLS, FID).
- Limit 'use client':
- Favor server components and Next.js SSR.
- Use only for Web API access in small components.
- Avoid for data fetching or state management.

Follow Next.js docs for Data Fetching, Rendering, and Routing.

Group related components in feature folders

- Keep utilities in lib/ directory
- Keep hooks in hooks/ directory
- Maintain consistent file structure across components

- Use shadcn/ui components as base components
- Extend base components rather than creating new ones from scratch
- Keep component files focused and single-responsibility
- Follow the established component structure in components/ui/\*
- Use proper component typing with forwardRef
- Extend existing interfaces rather than redefining
- Use discriminated unions for complex state
- Export type definitions alongside components
- Use const assertions for static objects

- Use React Context for global state (like SidebarProvider pattern)
- Prefer hooks for reusable logic (like useIsMobile pattern)
- Keep state as local as possible
- Use controlled components with explicit state management

- Use CSS variables for theming (following globals.css pattern)
- Follow the established color token system
- Use cva for component variants
- Maintain dark mode compatibility
- Use cn() utility for className merging

- Implement proper React.memo() for expensive components
- Use proper suspense boundaries around async components
- Implement proper error boundaries
- Use proper loading states (like Skeleton components)

- Follow ARIA patterns (as seen in UI components)
- Include proper keyboard navigation
- Maintain proper focus management
- Include proper screen reader support

- Group related components in feature folders
- Keep utilities in lib/ directory
- Keep hooks in hooks/ directory
- Maintain consistent file structure across components
